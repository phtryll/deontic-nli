from source.cfg import CFG
from source.cfg_utils import join
from source.lexical_items_utils import *

def generate_examples(grammar: CFG, num_examples: int = 20, print_tree: bool = False) -> None:
    """Prints examples generated by a grammar."""

    # Generate examples
    for _ in range(num_examples):

        # Generate a random tree
        tree = grammar.generate(False)

        # Get the terminal yield of the tree
        tokens = tree.output()

        # See the tree structure and the yield
        if print_tree:
            print("sampled tree:", tree) # Print the tree structure
            print("yield:", tokens) # Print the yield (list of tokens)
        
        # Otherwise print the examples
        else:
            text = join(tokens) # Join the tokens into a sentence
            print(text) # Print the resulting sentence


def generate_rules(prompts: Dict[str, List[str]], tokenizer: Any, model: Any, top_k: int = 50) -> None:
    """Generate rules for specific non-terminal symbols for lexical diversity."""
    
    # Generate lexical items pool using CamemBERT
    pool: Dict[str, List[str]] = generate_lexical_pool(prompts, tokenizer, model, top_k=top_k)
    
    # Format the lexical items as instances of `Rule` class
    rules: List[str] = format_rules(pool)

    # Print the resulting rules
    for rule in rules:
        print(rule)
